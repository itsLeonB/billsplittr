// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repositories.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repositories.go -destination=internal/test/mocks/repository_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	entity "github.com/itsLeonB/billsplittr/internal/entity"
	crud "github.com/itsLeonB/go-crud"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockGroupExpenseRepository is a mock of GroupExpenseRepository interface.
type MockGroupExpenseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupExpenseRepositoryMockRecorder
	isgomock struct{}
}

// MockGroupExpenseRepositoryMockRecorder is the mock recorder for MockGroupExpenseRepository.
type MockGroupExpenseRepositoryMockRecorder struct {
	mock *MockGroupExpenseRepository
}

// NewMockGroupExpenseRepository creates a new mock instance.
func NewMockGroupExpenseRepository(ctrl *gomock.Controller) *MockGroupExpenseRepository {
	mock := &MockGroupExpenseRepository{ctrl: ctrl}
	mock.recorder = &MockGroupExpenseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupExpenseRepository) EXPECT() *MockGroupExpenseRepositoryMockRecorder {
	return m.recorder
}

// BatchInsert mocks base method.
func (m *MockGroupExpenseRepository) BatchInsert(ctx context.Context, models []entity.GroupExpense) ([]entity.GroupExpense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsert", ctx, models)
	ret0, _ := ret[0].([]entity.GroupExpense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchInsert indicates an expected call of BatchInsert.
func (mr *MockGroupExpenseRepositoryMockRecorder) BatchInsert(ctx, models any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsert", reflect.TypeOf((*MockGroupExpenseRepository)(nil).BatchInsert), ctx, models)
}

// Delete mocks base method.
func (m *MockGroupExpenseRepository) Delete(ctx context.Context, model entity.GroupExpense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupExpenseRepositoryMockRecorder) Delete(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupExpenseRepository)(nil).Delete), ctx, model)
}

// FindAll mocks base method.
func (m *MockGroupExpenseRepository) FindAll(ctx context.Context, spec crud.Specification[entity.GroupExpense]) ([]entity.GroupExpense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, spec)
	ret0, _ := ret[0].([]entity.GroupExpense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockGroupExpenseRepositoryMockRecorder) FindAll(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockGroupExpenseRepository)(nil).FindAll), ctx, spec)
}

// FindFirst mocks base method.
func (m *MockGroupExpenseRepository) FindFirst(ctx context.Context, spec crud.Specification[entity.GroupExpense]) (entity.GroupExpense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirst", ctx, spec)
	ret0, _ := ret[0].(entity.GroupExpense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirst indicates an expected call of FindFirst.
func (mr *MockGroupExpenseRepositoryMockRecorder) FindFirst(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirst", reflect.TypeOf((*MockGroupExpenseRepository)(nil).FindFirst), ctx, spec)
}

// GetGormInstance mocks base method.
func (m *MockGroupExpenseRepository) GetGormInstance(ctx context.Context) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGormInstance", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGormInstance indicates an expected call of GetGormInstance.
func (mr *MockGroupExpenseRepositoryMockRecorder) GetGormInstance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGormInstance", reflect.TypeOf((*MockGroupExpenseRepository)(nil).GetGormInstance), ctx)
}

// Insert mocks base method.
func (m *MockGroupExpenseRepository) Insert(ctx context.Context, model entity.GroupExpense) (entity.GroupExpense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, model)
	ret0, _ := ret[0].(entity.GroupExpense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockGroupExpenseRepositoryMockRecorder) Insert(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockGroupExpenseRepository)(nil).Insert), ctx, model)
}

// SyncParticipants mocks base method.
func (m *MockGroupExpenseRepository) SyncParticipants(ctx context.Context, groupExpenseID uuid.UUID, participants []entity.ExpenseParticipant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncParticipants", ctx, groupExpenseID, participants)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncParticipants indicates an expected call of SyncParticipants.
func (mr *MockGroupExpenseRepositoryMockRecorder) SyncParticipants(ctx, groupExpenseID, participants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncParticipants", reflect.TypeOf((*MockGroupExpenseRepository)(nil).SyncParticipants), ctx, groupExpenseID, participants)
}

// Update mocks base method.
func (m *MockGroupExpenseRepository) Update(ctx context.Context, model entity.GroupExpense) (entity.GroupExpense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(entity.GroupExpense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGroupExpenseRepositoryMockRecorder) Update(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGroupExpenseRepository)(nil).Update), ctx, model)
}

// MockExpenseItemRepository is a mock of ExpenseItemRepository interface.
type MockExpenseItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseItemRepositoryMockRecorder
	isgomock struct{}
}

// MockExpenseItemRepositoryMockRecorder is the mock recorder for MockExpenseItemRepository.
type MockExpenseItemRepositoryMockRecorder struct {
	mock *MockExpenseItemRepository
}

// NewMockExpenseItemRepository creates a new mock instance.
func NewMockExpenseItemRepository(ctrl *gomock.Controller) *MockExpenseItemRepository {
	mock := &MockExpenseItemRepository{ctrl: ctrl}
	mock.recorder = &MockExpenseItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseItemRepository) EXPECT() *MockExpenseItemRepositoryMockRecorder {
	return m.recorder
}

// BatchInsert mocks base method.
func (m *MockExpenseItemRepository) BatchInsert(ctx context.Context, models []entity.ExpenseItem) ([]entity.ExpenseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsert", ctx, models)
	ret0, _ := ret[0].([]entity.ExpenseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchInsert indicates an expected call of BatchInsert.
func (mr *MockExpenseItemRepositoryMockRecorder) BatchInsert(ctx, models any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsert", reflect.TypeOf((*MockExpenseItemRepository)(nil).BatchInsert), ctx, models)
}

// Delete mocks base method.
func (m *MockExpenseItemRepository) Delete(ctx context.Context, model entity.ExpenseItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExpenseItemRepositoryMockRecorder) Delete(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpenseItemRepository)(nil).Delete), ctx, model)
}

// FindAll mocks base method.
func (m *MockExpenseItemRepository) FindAll(ctx context.Context, spec crud.Specification[entity.ExpenseItem]) ([]entity.ExpenseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, spec)
	ret0, _ := ret[0].([]entity.ExpenseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockExpenseItemRepositoryMockRecorder) FindAll(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockExpenseItemRepository)(nil).FindAll), ctx, spec)
}

// FindFirst mocks base method.
func (m *MockExpenseItemRepository) FindFirst(ctx context.Context, spec crud.Specification[entity.ExpenseItem]) (entity.ExpenseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirst", ctx, spec)
	ret0, _ := ret[0].(entity.ExpenseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirst indicates an expected call of FindFirst.
func (mr *MockExpenseItemRepositoryMockRecorder) FindFirst(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirst", reflect.TypeOf((*MockExpenseItemRepository)(nil).FindFirst), ctx, spec)
}

// GetGormInstance mocks base method.
func (m *MockExpenseItemRepository) GetGormInstance(ctx context.Context) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGormInstance", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGormInstance indicates an expected call of GetGormInstance.
func (mr *MockExpenseItemRepositoryMockRecorder) GetGormInstance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGormInstance", reflect.TypeOf((*MockExpenseItemRepository)(nil).GetGormInstance), ctx)
}

// Insert mocks base method.
func (m *MockExpenseItemRepository) Insert(ctx context.Context, model entity.ExpenseItem) (entity.ExpenseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, model)
	ret0, _ := ret[0].(entity.ExpenseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockExpenseItemRepositoryMockRecorder) Insert(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockExpenseItemRepository)(nil).Insert), ctx, model)
}

// SyncParticipants mocks base method.
func (m *MockExpenseItemRepository) SyncParticipants(ctx context.Context, expenseItemID uuid.UUID, participants []entity.ItemParticipant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncParticipants", ctx, expenseItemID, participants)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncParticipants indicates an expected call of SyncParticipants.
func (mr *MockExpenseItemRepositoryMockRecorder) SyncParticipants(ctx, expenseItemID, participants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncParticipants", reflect.TypeOf((*MockExpenseItemRepository)(nil).SyncParticipants), ctx, expenseItemID, participants)
}

// Update mocks base method.
func (m *MockExpenseItemRepository) Update(ctx context.Context, model entity.ExpenseItem) (entity.ExpenseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(entity.ExpenseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockExpenseItemRepositoryMockRecorder) Update(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExpenseItemRepository)(nil).Update), ctx, model)
}

// MockExpenseParticipantRepository is a mock of ExpenseParticipantRepository interface.
type MockExpenseParticipantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseParticipantRepositoryMockRecorder
	isgomock struct{}
}

// MockExpenseParticipantRepositoryMockRecorder is the mock recorder for MockExpenseParticipantRepository.
type MockExpenseParticipantRepositoryMockRecorder struct {
	mock *MockExpenseParticipantRepository
}

// NewMockExpenseParticipantRepository creates a new mock instance.
func NewMockExpenseParticipantRepository(ctrl *gomock.Controller) *MockExpenseParticipantRepository {
	mock := &MockExpenseParticipantRepository{ctrl: ctrl}
	mock.recorder = &MockExpenseParticipantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseParticipantRepository) EXPECT() *MockExpenseParticipantRepositoryMockRecorder {
	return m.recorder
}

// BatchInsert mocks base method.
func (m *MockExpenseParticipantRepository) BatchInsert(ctx context.Context, models []entity.ExpenseParticipant) ([]entity.ExpenseParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsert", ctx, models)
	ret0, _ := ret[0].([]entity.ExpenseParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchInsert indicates an expected call of BatchInsert.
func (mr *MockExpenseParticipantRepositoryMockRecorder) BatchInsert(ctx, models any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsert", reflect.TypeOf((*MockExpenseParticipantRepository)(nil).BatchInsert), ctx, models)
}

// Delete mocks base method.
func (m *MockExpenseParticipantRepository) Delete(ctx context.Context, model entity.ExpenseParticipant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExpenseParticipantRepositoryMockRecorder) Delete(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpenseParticipantRepository)(nil).Delete), ctx, model)
}

// FindAll mocks base method.
func (m *MockExpenseParticipantRepository) FindAll(ctx context.Context, spec crud.Specification[entity.ExpenseParticipant]) ([]entity.ExpenseParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, spec)
	ret0, _ := ret[0].([]entity.ExpenseParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockExpenseParticipantRepositoryMockRecorder) FindAll(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockExpenseParticipantRepository)(nil).FindAll), ctx, spec)
}

// FindFirst mocks base method.
func (m *MockExpenseParticipantRepository) FindFirst(ctx context.Context, spec crud.Specification[entity.ExpenseParticipant]) (entity.ExpenseParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirst", ctx, spec)
	ret0, _ := ret[0].(entity.ExpenseParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirst indicates an expected call of FindFirst.
func (mr *MockExpenseParticipantRepositoryMockRecorder) FindFirst(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirst", reflect.TypeOf((*MockExpenseParticipantRepository)(nil).FindFirst), ctx, spec)
}

// GetGormInstance mocks base method.
func (m *MockExpenseParticipantRepository) GetGormInstance(ctx context.Context) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGormInstance", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGormInstance indicates an expected call of GetGormInstance.
func (mr *MockExpenseParticipantRepositoryMockRecorder) GetGormInstance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGormInstance", reflect.TypeOf((*MockExpenseParticipantRepository)(nil).GetGormInstance), ctx)
}

// Insert mocks base method.
func (m *MockExpenseParticipantRepository) Insert(ctx context.Context, model entity.ExpenseParticipant) (entity.ExpenseParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, model)
	ret0, _ := ret[0].(entity.ExpenseParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockExpenseParticipantRepositoryMockRecorder) Insert(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockExpenseParticipantRepository)(nil).Insert), ctx, model)
}

// Update mocks base method.
func (m *MockExpenseParticipantRepository) Update(ctx context.Context, model entity.ExpenseParticipant) (entity.ExpenseParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(entity.ExpenseParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockExpenseParticipantRepositoryMockRecorder) Update(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExpenseParticipantRepository)(nil).Update), ctx, model)
}

// MockOtherFeeRepository is a mock of OtherFeeRepository interface.
type MockOtherFeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOtherFeeRepositoryMockRecorder
	isgomock struct{}
}

// MockOtherFeeRepositoryMockRecorder is the mock recorder for MockOtherFeeRepository.
type MockOtherFeeRepositoryMockRecorder struct {
	mock *MockOtherFeeRepository
}

// NewMockOtherFeeRepository creates a new mock instance.
func NewMockOtherFeeRepository(ctrl *gomock.Controller) *MockOtherFeeRepository {
	mock := &MockOtherFeeRepository{ctrl: ctrl}
	mock.recorder = &MockOtherFeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtherFeeRepository) EXPECT() *MockOtherFeeRepositoryMockRecorder {
	return m.recorder
}

// BatchInsert mocks base method.
func (m *MockOtherFeeRepository) BatchInsert(ctx context.Context, models []entity.OtherFee) ([]entity.OtherFee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsert", ctx, models)
	ret0, _ := ret[0].([]entity.OtherFee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchInsert indicates an expected call of BatchInsert.
func (mr *MockOtherFeeRepositoryMockRecorder) BatchInsert(ctx, models any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsert", reflect.TypeOf((*MockOtherFeeRepository)(nil).BatchInsert), ctx, models)
}

// Delete mocks base method.
func (m *MockOtherFeeRepository) Delete(ctx context.Context, model entity.OtherFee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOtherFeeRepositoryMockRecorder) Delete(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOtherFeeRepository)(nil).Delete), ctx, model)
}

// FindAll mocks base method.
func (m *MockOtherFeeRepository) FindAll(ctx context.Context, spec crud.Specification[entity.OtherFee]) ([]entity.OtherFee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, spec)
	ret0, _ := ret[0].([]entity.OtherFee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockOtherFeeRepositoryMockRecorder) FindAll(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockOtherFeeRepository)(nil).FindAll), ctx, spec)
}

// FindFirst mocks base method.
func (m *MockOtherFeeRepository) FindFirst(ctx context.Context, spec crud.Specification[entity.OtherFee]) (entity.OtherFee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirst", ctx, spec)
	ret0, _ := ret[0].(entity.OtherFee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirst indicates an expected call of FindFirst.
func (mr *MockOtherFeeRepositoryMockRecorder) FindFirst(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirst", reflect.TypeOf((*MockOtherFeeRepository)(nil).FindFirst), ctx, spec)
}

// GetGormInstance mocks base method.
func (m *MockOtherFeeRepository) GetGormInstance(ctx context.Context) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGormInstance", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGormInstance indicates an expected call of GetGormInstance.
func (mr *MockOtherFeeRepositoryMockRecorder) GetGormInstance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGormInstance", reflect.TypeOf((*MockOtherFeeRepository)(nil).GetGormInstance), ctx)
}

// Insert mocks base method.
func (m *MockOtherFeeRepository) Insert(ctx context.Context, model entity.OtherFee) (entity.OtherFee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, model)
	ret0, _ := ret[0].(entity.OtherFee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockOtherFeeRepositoryMockRecorder) Insert(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOtherFeeRepository)(nil).Insert), ctx, model)
}

// SyncParticipants mocks base method.
func (m *MockOtherFeeRepository) SyncParticipants(ctx context.Context, feeID uuid.UUID, participants []entity.FeeParticipant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncParticipants", ctx, feeID, participants)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncParticipants indicates an expected call of SyncParticipants.
func (mr *MockOtherFeeRepositoryMockRecorder) SyncParticipants(ctx, feeID, participants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncParticipants", reflect.TypeOf((*MockOtherFeeRepository)(nil).SyncParticipants), ctx, feeID, participants)
}

// Update mocks base method.
func (m *MockOtherFeeRepository) Update(ctx context.Context, model entity.OtherFee) (entity.OtherFee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(entity.OtherFee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOtherFeeRepositoryMockRecorder) Update(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOtherFeeRepository)(nil).Update), ctx, model)
}

// MockExpenseBillRepository is a mock of ExpenseBillRepository interface.
type MockExpenseBillRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseBillRepositoryMockRecorder
	isgomock struct{}
}

// MockExpenseBillRepositoryMockRecorder is the mock recorder for MockExpenseBillRepository.
type MockExpenseBillRepositoryMockRecorder struct {
	mock *MockExpenseBillRepository
}

// NewMockExpenseBillRepository creates a new mock instance.
func NewMockExpenseBillRepository(ctrl *gomock.Controller) *MockExpenseBillRepository {
	mock := &MockExpenseBillRepository{ctrl: ctrl}
	mock.recorder = &MockExpenseBillRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseBillRepository) EXPECT() *MockExpenseBillRepositoryMockRecorder {
	return m.recorder
}

// BatchInsert mocks base method.
func (m *MockExpenseBillRepository) BatchInsert(ctx context.Context, models []entity.ExpenseBill) ([]entity.ExpenseBill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsert", ctx, models)
	ret0, _ := ret[0].([]entity.ExpenseBill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchInsert indicates an expected call of BatchInsert.
func (mr *MockExpenseBillRepositoryMockRecorder) BatchInsert(ctx, models any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsert", reflect.TypeOf((*MockExpenseBillRepository)(nil).BatchInsert), ctx, models)
}

// Delete mocks base method.
func (m *MockExpenseBillRepository) Delete(ctx context.Context, model entity.ExpenseBill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExpenseBillRepositoryMockRecorder) Delete(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpenseBillRepository)(nil).Delete), ctx, model)
}

// FindAll mocks base method.
func (m *MockExpenseBillRepository) FindAll(ctx context.Context, spec crud.Specification[entity.ExpenseBill]) ([]entity.ExpenseBill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, spec)
	ret0, _ := ret[0].([]entity.ExpenseBill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockExpenseBillRepositoryMockRecorder) FindAll(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockExpenseBillRepository)(nil).FindAll), ctx, spec)
}

// FindFirst mocks base method.
func (m *MockExpenseBillRepository) FindFirst(ctx context.Context, spec crud.Specification[entity.ExpenseBill]) (entity.ExpenseBill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirst", ctx, spec)
	ret0, _ := ret[0].(entity.ExpenseBill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirst indicates an expected call of FindFirst.
func (mr *MockExpenseBillRepositoryMockRecorder) FindFirst(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirst", reflect.TypeOf((*MockExpenseBillRepository)(nil).FindFirst), ctx, spec)
}

// GetGormInstance mocks base method.
func (m *MockExpenseBillRepository) GetGormInstance(ctx context.Context) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGormInstance", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGormInstance indicates an expected call of GetGormInstance.
func (mr *MockExpenseBillRepositoryMockRecorder) GetGormInstance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGormInstance", reflect.TypeOf((*MockExpenseBillRepository)(nil).GetGormInstance), ctx)
}

// Insert mocks base method.
func (m *MockExpenseBillRepository) Insert(ctx context.Context, model entity.ExpenseBill) (entity.ExpenseBill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, model)
	ret0, _ := ret[0].(entity.ExpenseBill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockExpenseBillRepositoryMockRecorder) Insert(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockExpenseBillRepository)(nil).Insert), ctx, model)
}

// Update mocks base method.
func (m *MockExpenseBillRepository) Update(ctx context.Context, model entity.ExpenseBill) (entity.ExpenseBill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(entity.ExpenseBill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockExpenseBillRepositoryMockRecorder) Update(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExpenseBillRepository)(nil).Update), ctx, model)
}

// MockStorageRepository is a mock of StorageRepository interface.
type MockStorageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStorageRepositoryMockRecorder
	isgomock struct{}
}

// MockStorageRepositoryMockRecorder is the mock recorder for MockStorageRepository.
type MockStorageRepositoryMockRecorder struct {
	mock *MockStorageRepository
}

// NewMockStorageRepository creates a new mock instance.
func NewMockStorageRepository(ctrl *gomock.Controller) *MockStorageRepository {
	mock := &MockStorageRepository{ctrl: ctrl}
	mock.recorder = &MockStorageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageRepository) EXPECT() *MockStorageRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorageRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageRepository)(nil).Close))
}

// Delete mocks base method.
func (m *MockStorageRepository) Delete(ctx context.Context, bucketName, objectKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, bucketName, objectKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageRepositoryMockRecorder) Delete(ctx, bucketName, objectKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageRepository)(nil).Delete), ctx, bucketName, objectKey)
}

// Download mocks base method.
func (m *MockStorageRepository) Download(ctx context.Context, bucketName, objectKey string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, bucketName, objectKey)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockStorageRepositoryMockRecorder) Download(ctx, bucketName, objectKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockStorageRepository)(nil).Download), ctx, bucketName, objectKey)
}

// GetSignedURL mocks base method.
func (m *MockStorageRepository) GetSignedURL(ctx context.Context, bucketName, objectKey string, expiration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignedURL", ctx, bucketName, objectKey, expiration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignedURL indicates an expected call of GetSignedURL.
func (mr *MockStorageRepositoryMockRecorder) GetSignedURL(ctx, bucketName, objectKey, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignedURL", reflect.TypeOf((*MockStorageRepository)(nil).GetSignedURL), ctx, bucketName, objectKey, expiration)
}

// Upload mocks base method.
func (m *MockStorageRepository) Upload(ctx context.Context, req *entity.StorageUploadRequest) (*entity.StorageUploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, req)
	ret0, _ := ret[0].(*entity.StorageUploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockStorageRepositoryMockRecorder) Upload(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStorageRepository)(nil).Upload), ctx, req)
}
