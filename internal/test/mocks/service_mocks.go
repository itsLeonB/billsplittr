// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/services.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/services.go -destination=internal/test/mocks/service_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	dto "github.com/itsLeonB/billsplittr/internal/dto"
	entity "github.com/itsLeonB/billsplittr/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupExpenseService is a mock of GroupExpenseService interface.
type MockGroupExpenseService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupExpenseServiceMockRecorder
	isgomock struct{}
}

// MockGroupExpenseServiceMockRecorder is the mock recorder for MockGroupExpenseService.
type MockGroupExpenseServiceMockRecorder struct {
	mock *MockGroupExpenseService
}

// NewMockGroupExpenseService creates a new mock instance.
func NewMockGroupExpenseService(ctrl *gomock.Controller) *MockGroupExpenseService {
	mock := &MockGroupExpenseService{ctrl: ctrl}
	mock.recorder = &MockGroupExpenseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupExpenseService) EXPECT() *MockGroupExpenseServiceMockRecorder {
	return m.recorder
}

// ConfirmDraft mocks base method.
func (m *MockGroupExpenseService) ConfirmDraft(ctx context.Context, id, profileID uuid.UUID) (dto.GroupExpenseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmDraft", ctx, id, profileID)
	ret0, _ := ret[0].(dto.GroupExpenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmDraft indicates an expected call of ConfirmDraft.
func (mr *MockGroupExpenseServiceMockRecorder) ConfirmDraft(ctx, id, profileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmDraft", reflect.TypeOf((*MockGroupExpenseService)(nil).ConfirmDraft), ctx, id, profileID)
}

// CreateDraft mocks base method.
func (m *MockGroupExpenseService) CreateDraft(ctx context.Context, request dto.NewGroupExpenseRequest) (dto.GroupExpenseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDraft", ctx, request)
	ret0, _ := ret[0].(dto.GroupExpenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDraft indicates an expected call of CreateDraft.
func (mr *MockGroupExpenseServiceMockRecorder) CreateDraft(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraft", reflect.TypeOf((*MockGroupExpenseService)(nil).CreateDraft), ctx, request)
}

// GetAllCreated mocks base method.
func (m *MockGroupExpenseService) GetAllCreated(ctx context.Context, profileID uuid.UUID) ([]dto.GroupExpenseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCreated", ctx, profileID)
	ret0, _ := ret[0].([]dto.GroupExpenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCreated indicates an expected call of GetAllCreated.
func (mr *MockGroupExpenseServiceMockRecorder) GetAllCreated(ctx, profileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCreated", reflect.TypeOf((*MockGroupExpenseService)(nil).GetAllCreated), ctx, profileID)
}

// GetDetails mocks base method.
func (m *MockGroupExpenseService) GetDetails(ctx context.Context, id uuid.UUID) (dto.GroupExpenseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetails", ctx, id)
	ret0, _ := ret[0].(dto.GroupExpenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetails indicates an expected call of GetDetails.
func (mr *MockGroupExpenseServiceMockRecorder) GetDetails(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetails", reflect.TypeOf((*MockGroupExpenseService)(nil).GetDetails), ctx, id)
}

// GetUnconfirmedGroupExpenseForUpdate mocks base method.
func (m *MockGroupExpenseService) GetUnconfirmedGroupExpenseForUpdate(ctx context.Context, profileID, id uuid.UUID) (entity.GroupExpense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnconfirmedGroupExpenseForUpdate", ctx, profileID, id)
	ret0, _ := ret[0].(entity.GroupExpense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnconfirmedGroupExpenseForUpdate indicates an expected call of GetUnconfirmedGroupExpenseForUpdate.
func (mr *MockGroupExpenseServiceMockRecorder) GetUnconfirmedGroupExpenseForUpdate(ctx, profileID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnconfirmedGroupExpenseForUpdate", reflect.TypeOf((*MockGroupExpenseService)(nil).GetUnconfirmedGroupExpenseForUpdate), ctx, profileID, id)
}

// ParseFromBillText mocks base method.
func (m *MockGroupExpenseService) ParseFromBillText(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseFromBillText", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseFromBillText indicates an expected call of ParseFromBillText.
func (mr *MockGroupExpenseServiceMockRecorder) ParseFromBillText(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseFromBillText", reflect.TypeOf((*MockGroupExpenseService)(nil).ParseFromBillText), ctx)
}

// MockExpenseItemService is a mock of ExpenseItemService interface.
type MockExpenseItemService struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseItemServiceMockRecorder
	isgomock struct{}
}

// MockExpenseItemServiceMockRecorder is the mock recorder for MockExpenseItemService.
type MockExpenseItemServiceMockRecorder struct {
	mock *MockExpenseItemService
}

// NewMockExpenseItemService creates a new mock instance.
func NewMockExpenseItemService(ctrl *gomock.Controller) *MockExpenseItemService {
	mock := &MockExpenseItemService{ctrl: ctrl}
	mock.recorder = &MockExpenseItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseItemService) EXPECT() *MockExpenseItemServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockExpenseItemService) Add(ctx context.Context, request dto.NewExpenseItemRequest) (dto.ExpenseItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, request)
	ret0, _ := ret[0].(dto.ExpenseItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockExpenseItemServiceMockRecorder) Add(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockExpenseItemService)(nil).Add), ctx, request)
}

// GetDetails mocks base method.
func (m *MockExpenseItemService) GetDetails(ctx context.Context, groupExpenseID, expenseItemID uuid.UUID) (dto.ExpenseItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetails", ctx, groupExpenseID, expenseItemID)
	ret0, _ := ret[0].(dto.ExpenseItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetails indicates an expected call of GetDetails.
func (mr *MockExpenseItemServiceMockRecorder) GetDetails(ctx, groupExpenseID, expenseItemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetails", reflect.TypeOf((*MockExpenseItemService)(nil).GetDetails), ctx, groupExpenseID, expenseItemID)
}

// Remove mocks base method.
func (m *MockExpenseItemService) Remove(ctx context.Context, profileID, id, groupExpenseID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, profileID, id, groupExpenseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockExpenseItemServiceMockRecorder) Remove(ctx, profileID, id, groupExpenseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockExpenseItemService)(nil).Remove), ctx, profileID, id, groupExpenseID)
}

// Update mocks base method.
func (m *MockExpenseItemService) Update(ctx context.Context, request dto.UpdateExpenseItemRequest) (dto.ExpenseItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, request)
	ret0, _ := ret[0].(dto.ExpenseItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockExpenseItemServiceMockRecorder) Update(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExpenseItemService)(nil).Update), ctx, request)
}

// MockOtherFeeService is a mock of OtherFeeService interface.
type MockOtherFeeService struct {
	ctrl     *gomock.Controller
	recorder *MockOtherFeeServiceMockRecorder
	isgomock struct{}
}

// MockOtherFeeServiceMockRecorder is the mock recorder for MockOtherFeeService.
type MockOtherFeeServiceMockRecorder struct {
	mock *MockOtherFeeService
}

// NewMockOtherFeeService creates a new mock instance.
func NewMockOtherFeeService(ctrl *gomock.Controller) *MockOtherFeeService {
	mock := &MockOtherFeeService{ctrl: ctrl}
	mock.recorder = &MockOtherFeeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtherFeeService) EXPECT() *MockOtherFeeServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockOtherFeeService) Add(ctx context.Context, request dto.NewOtherFeeRequest) (dto.OtherFeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, request)
	ret0, _ := ret[0].(dto.OtherFeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockOtherFeeServiceMockRecorder) Add(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockOtherFeeService)(nil).Add), ctx, request)
}

// GetCalculationMethods mocks base method.
func (m *MockOtherFeeService) GetCalculationMethods() []dto.FeeCalculationMethodInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCalculationMethods")
	ret0, _ := ret[0].([]dto.FeeCalculationMethodInfo)
	return ret0
}

// GetCalculationMethods indicates an expected call of GetCalculationMethods.
func (mr *MockOtherFeeServiceMockRecorder) GetCalculationMethods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCalculationMethods", reflect.TypeOf((*MockOtherFeeService)(nil).GetCalculationMethods))
}

// Remove mocks base method.
func (m *MockOtherFeeService) Remove(ctx context.Context, profileID, id, groupExpenseID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, profileID, id, groupExpenseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockOtherFeeServiceMockRecorder) Remove(ctx, profileID, id, groupExpenseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockOtherFeeService)(nil).Remove), ctx, profileID, id, groupExpenseID)
}

// Update mocks base method.
func (m *MockOtherFeeService) Update(ctx context.Context, request dto.UpdateOtherFeeRequest) (dto.OtherFeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, request)
	ret0, _ := ret[0].(dto.OtherFeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOtherFeeServiceMockRecorder) Update(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOtherFeeService)(nil).Update), ctx, request)
}

// MockExpenseBillService is a mock of ExpenseBillService interface.
type MockExpenseBillService struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseBillServiceMockRecorder
	isgomock struct{}
}

// MockExpenseBillServiceMockRecorder is the mock recorder for MockExpenseBillService.
type MockExpenseBillServiceMockRecorder struct {
	mock *MockExpenseBillService
}

// NewMockExpenseBillService creates a new mock instance.
func NewMockExpenseBillService(ctrl *gomock.Controller) *MockExpenseBillService {
	mock := &MockExpenseBillService{ctrl: ctrl}
	mock.recorder = &MockExpenseBillServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseBillService) EXPECT() *MockExpenseBillServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockExpenseBillService) Delete(ctx context.Context, id, profileID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, profileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExpenseBillServiceMockRecorder) Delete(ctx, id, profileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExpenseBillService)(nil).Delete), ctx, id, profileID)
}

// EnqueueCleanup mocks base method.
func (m *MockExpenseBillService) EnqueueCleanup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueCleanup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueCleanup indicates an expected call of EnqueueCleanup.
func (mr *MockExpenseBillServiceMockRecorder) EnqueueCleanup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueCleanup", reflect.TypeOf((*MockExpenseBillService)(nil).EnqueueCleanup), ctx)
}

// Get mocks base method.
func (m *MockExpenseBillService) Get(ctx context.Context, id uuid.UUID) (dto.ExpenseBillResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(dto.ExpenseBillResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExpenseBillServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpenseBillService)(nil).Get), ctx, id)
}

// GetAllCreated mocks base method.
func (m *MockExpenseBillService) GetAllCreated(ctx context.Context, creatorProfileID uuid.UUID) ([]dto.ExpenseBillResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCreated", ctx, creatorProfileID)
	ret0, _ := ret[0].([]dto.ExpenseBillResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCreated indicates an expected call of GetAllCreated.
func (mr *MockExpenseBillServiceMockRecorder) GetAllCreated(ctx, creatorProfileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCreated", reflect.TypeOf((*MockExpenseBillService)(nil).GetAllCreated), ctx, creatorProfileID)
}

// Save mocks base method.
func (m *MockExpenseBillService) Save(ctx context.Context, req dto.NewExpenseBillRequest) (dto.ExpenseBillResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, req)
	ret0, _ := ret[0].(dto.ExpenseBillResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockExpenseBillServiceMockRecorder) Save(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockExpenseBillService)(nil).Save), ctx, req)
}

// MockLLMService is a mock of LLMService interface.
type MockLLMService struct {
	ctrl     *gomock.Controller
	recorder *MockLLMServiceMockRecorder
	isgomock struct{}
}

// MockLLMServiceMockRecorder is the mock recorder for MockLLMService.
type MockLLMServiceMockRecorder struct {
	mock *MockLLMService
}

// NewMockLLMService creates a new mock instance.
func NewMockLLMService(ctrl *gomock.Controller) *MockLLMService {
	mock := &MockLLMService{ctrl: ctrl}
	mock.recorder = &MockLLMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLLMService) EXPECT() *MockLLMServiceMockRecorder {
	return m.recorder
}

// Prompt mocks base method.
func (m *MockLLMService) Prompt(ctx context.Context, systemMsg, userMsg string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prompt", ctx, systemMsg, userMsg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prompt indicates an expected call of Prompt.
func (mr *MockLLMServiceMockRecorder) Prompt(ctx, systemMsg, userMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockLLMService)(nil).Prompt), ctx, systemMsg, userMsg)
}
